{"mappings":"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","sources":["index.mjs","apis/productivity/notion.js","apis/media/spotify.js"],"sourcesContent":["import Express from \"express\";\nimport {NotionFetch, getNotionDB} from \"./apis/productivity/notion.js\";\nimport {AuthoriseUser, SPOTIFY_ACCOUNTS_URL, ErrorRedirect, generateRandomString, getTokens, getPlaylists} from \"./apis/media/spotify.js\"\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport \"bytenode\";\n\n// const FILENAME = fileURLToPath(import.meta.url);\n// const DIRNAME = path.dirname(FILENAME);\n\nconst app = Express();\n\napp.use(cookieParser());\n\napp.use(cors());\n\napp.get(\"/\", (req, res) => {\n    res.send(`CORS-enabled Integrator App listening on port ${process.env.PORT}`);\n});\n\n//_ NOTION\napp.get(\"/notion_db\", async (req, res) => {\n    const NOTION_DB_RESPONSE = await getNotionDB();\n    console.log(NOTION_DB_RESPONSE);\n    res.send(NOTION_DB_RESPONSE);\n});\n\napp.get(\"/notion_uni_db\", async (req, res) => {\n    console.log(req);\n    const NOTION_RESPONSE = await NotionFetch();\n    res.send(JSON.stringify(NOTION_RESPONSE, null, 2));\n});\n\n//_ SPOTIFY\napp.get(\"/spotify\", (req, res) => {\n    const STATE = generateRandomString(16);\n    console.debug(req.query.redirectURI);\n    AuthoriseUser(res, STATE, req.query.redirectURI);\n});\n\napp.get(\"/spotify_callback\", (req, res) => {\n    const STATE = req.query.state || null;\n    console.log(STATE);\n    if (STATE === null) {\n        ErrorRedirect(\"state mismatch\", req, res);\n    } else {\n        res.send({\n            authStatus: true,\n            queryCode: req.query.code\n        });\n    }\n});\n\napp.get(\"/spotify_tokens\", async (req, res) => {\n    const AUTH_OPTIONS = {\n        url: `${SPOTIFY_ACCOUNTS_URL}/api/token`,\n        form: {\n            code: req.query.queryCode,\n            redirect_uri: 'http://localhost:3000/spotify_callback',\n            grant_type: 'authorization_code'\n        },\n        headers: {\n            \"Authorization\": `Basic ${new Buffer(process.env.SPOTIFY_CLIENT_ID + \":\" + process.env.SPOTIFY_CLIENT_SECRET).toString(\"base64\")}`,\n            \"Content-Type\": \"applicaton/x-www-form-urlencoded;charset=UTF-8\"\n        },\n        json: true\n    }\n    await getTokens(AUTH_OPTIONS, res);\n});\n\napp.get(\"/spotify_playlists\", async (req, res) => {\n    const AUTH_OPTIONS = {\n        url: `${SPOTIFY_ACCOUNTS_URL}/api/token`,\n        form: {\n            code: req.query.code,\n            redirect_uri: \"http://localhost:3000/spotify_playlists\",\n            grant_type: \"authorization_code\"\n        },\n        headers: {\n            \"Authorization\": `Basic ${new Buffer(process.env.SPOTIFY_CLIENT_ID + \":\" + process.env.SPOTIFY_CLIENT_SECRET).toString(\"base64\")}`,\n            \"Content-Type\": \"applicaton/x-www-form-urlencoded\"\n        },\n        json: true\n    };\n    await getPlaylists(AUTH_OPTIONS, res);\n});\n\n//_ MICROSOFT\n\napp.listen(process.env.PORT || 3000, () => {\n    console.log(`CORS-enabled Integrator App listening on port ${process.env.PORT || 3000}`);\n});","import {Client} from \"@notionhq/client\";\n\nconst NOTION_CLIENT = new Client({\n    auth: process.env.NOTION_TOKEN,\n});\n\nconst ProcessNotionData = (data) => {\n    let items = [];\n    data.results.forEach((i) => {\n        let item = {\n            revisionType: i.properties[\"Revision Type\"].select.name,\n            deadline: i.properties[\"Deadline\"].date,\n            module: i.properties[\"Module\"].select.name,\n            state: i.properties[\"State\"].select.name,\n            name: i.properties[\"Name\"].title[0].text.content\n        }\n        items.push(item);\n    });\n    return items;\n}\n\nexport const NotionFetch = async () => {\n    // console.log(process.env.NOTION_TOKEN);\n    let finished = false;\n    let next_cursor = undefined;\n    let data = [];\n    while (!finished) {\n        const res = await NOTION_CLIENT.databases.query({\n            database_id: process.env.NOTION_UNI_DB_ID,\n            page_size: 100,\n            start_cursor: next_cursor\n        });\n        data.push(...ProcessNotionData(res));\n        finished = !res.has_more;\n        if (!finished) {\n            next_cursor = res.next_cursor;\n        }\n    }\n    return data;\n}\n\nconst ProcessNotionDBData = (data) => {\n    let items = [];\n    data.results.forEach((i) => {\n        // let item = {\n        //     title: i.title.text.content\n        // }\n        // console.log(i);\n        items.push({\n            title: i.title[0].plain_text,\n            properties: i.properties,\n            url: i.url\n        });\n        // console.log(i.properties);\n    });\n    // console.log({items});\n    return items;\n}\n\nexport const getNotionDB = async () => {\n    const RES = await NOTION_CLIENT.search({\n        filter: {\n            value: \"database\",\n            property: \"object\"\n        }\n    });\n    const PROCESSED_RES = ProcessNotionDBData(RES);\n    return PROCESSED_RES;\n    // console.log(RES);\n}","import queryString from \"querystring\";\nimport axios from \"axios\";\nimport Request from \"request\";\n\nexport const SPOTIFY_ACCOUNTS_URL = 'https://accounts.spotify.com';\nexport const SPOTIFY_API_URL = 'https://api.spotify.com/v1';\n\nexport const generateRandomString = (length) => {\n    let text = '';\n    const POSSIBLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  \n    for (let i = 0; i < length; i++) {\n        text += POSSIBLE.charAt(Math.floor(Math.random() * POSSIBLE.length));\n    }\n    return text;\n};\n\nexport const AuthoriseUser = (res, state_str, redirect_URI) => {\n    const QS = queryString.stringify({\n            response_type: \"code\",\n            client_id: process.env.SPOTIFY_CLIENT_ID,\n            redirect_uri: redirect_URI,\n            scope: process.env.SPOTIFY_SCOPES,\n            state: state_str,\n    });\n    res.redirect(302, `${SPOTIFY_ACCOUNTS_URL}/authorize?${QS}`);\n}\n\nexport const getTokens = async (auth_options, res) => {\n    // const RES = await fetch(auth_options.url, {\n    //     method: 'POST',\n    //     body: JSON.stringify(auth_options.form),\n    //     headers: auth_options.headers\n    // });\n    // console.log(await RES.text());\n    Request.post(auth_options, (err, token_res, body) => {\n        if (err || token_res.statusCode != 200) {\n            console.error(`ERROR: ${body.error}`);\n        } else {\n            res.send({\n                accessToken: body.access_token,\n                refreshToken: body.refresh_token,\n                scope: body.scope,\n                expiry: body.expires_in\n            });\n        }\n    });\n    // const AUTH_OPTIONS = {\n    //     method: \"post\",\n    //     url: `${SPOTIFY_ACCOUNTS_URL}/api/token`,\n    //     data: qs.stringify(auth_options.form),\n    //     headers: auth_options.headers,\n    //     withCredentials: true,\n    //     response_type: \"json\"\n    // };\n    // console.log(AUTH_OPTIONS);\n    // axios(AUTH_OPTIONS).then(token_res => {\n    //     console.log(\"HERE\");\n    //     if (err || token_res.status !== 200) {\n    //         ErrorRedirect(err);\n    //     } else {\n    //         console.log(token_res.data);\n    //         res = {\n    //             accessToken: token_res.body.access_token,\n    //             tokenType: token_res.body.token_type,\n    //             expiry: token_res.body.expires_in,\n    //             refreshToken: token_res.body.refresh_token,\n    //         }\n    //     }\n    // }).catch(err => {\n    //     if (err.response) {\n    //         console.log(err.toJSON());\n    //         console.log(err.response.data);\n    //         // console.log(err.request);\n    //         // console.log(err.response.data);\n    //         // console.log(err.response.status);\n    //         // console.log(err.response.headers);\n    //     } else if (err.request) {\n    //         console.log(err.request);\n    //     } else {\n    //         console.log(`ERROR: ${err.message}`);\n    //     }\n    // });\n    // return res;\n}\n\nconst ProcessPlaylists = (res) => {\n    let formatted_res = [];\n\n    for (const PLAYLIST of res) {\n        PLAYLIST.owner.display_name === \"gauss\" ? formatted_res.push({\n            imageURL: PLAYLIST.images[0].url,\n            name: PLAYLIST.name,\n            ownerName: PLAYLIST.owner.display_name,\n            length: PLAYLIST.tracks.total,\n            type: PLAYLIST.type,\n        }) : \"\";\n    }\n\n    return formatted_res;\n}\n\nexport const getPlaylists = async (auth_options, res) => {\n    Request.post(auth_options, async (err, auth_res, body) => {\n        let playlist_response = [];\n        if (err || auth_res.statusCode !== 200) {\n            console.log(err);\n            console.log(\"UNSUCCESSFUL\");\n        } else {\n            let index = 0;\n            let next = \"\";\n            while (next !== null) {\n                const OPTIONS = {\n                    method: \"GET\",\n                    url: `${SPOTIFY_API_URL}/me/playlists`,\n                    params: {\n                        offset: index,\n                        limit: 50\n                    },\n                    headers: {\n                        \"Authorization\": `Bearer ${body.access_token}`,\n                    }\n                };    \n                // Request.get(OPTIONS, (err, playlist_res, playlist_body) => {\n                //     if (err || playlist_res.statusCode !== 200) {\n                //         console.error(playlist_body.error.message);\n                //     } else {\n                //         next = playlist_body.next;\n                //         offset = playlist_body.offset\n                //         playlist_response.push(ProcessPlaylists(playlist_body.items));\n                //         console.log(playlist_response);\n                //     }\n                // });\n                await axios(OPTIONS)\n                .then((playlist_res) => {\n                    next = playlist_res.data.next;\n                    index = playlist_res.data.limit\n                    playlist_response.push(ProcessPlaylists(playlist_res.data.items));\n                }).catch(err => {\n                    console.error(`ERROR \\n STATUS CODE: ${err.response} \\n STATUS TEXT: ${err.response}`);\n                });\n            }\n            res.send(playlist_response.flat());\n        }\n    });\n}\n\nexport const ErrorRedirect = (err, req, res) => {\n    console.error(err);\n    // res.redirect(\"/#\" + queryString.stringify({\n    //     error: err\n    // }));\n}"],"names":[],"version":3,"file":"app.js.map"}